# Obfuscated by the Botpalys encoder
#Time: Thu Sep  4 15:22:25 2025
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'=='))